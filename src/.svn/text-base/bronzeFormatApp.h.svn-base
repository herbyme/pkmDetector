#pragma once

#include "ofMain.h"
#include "ofxiPhone.h"
#include "ofxiPhoneExtras.h"

#include "audioEngine.h"

#define SAMPLERATE 44100

////hacked from ofxMaxim,  just for testing
class maxiSample  {
	
private:
	string 	myPath;
	int 	myChunkSize;
	int	mySubChunk1Size;
	short 	myFormat;
	int   	myByteRate;
	short 	myBlockAlign;
	short 	myBitsPerSample;
	int	myDataSize;
	double position;
	double speed;
	double output;
	
public:
	short 	myChannels;
	int   	mySampleRate;
	long length;
	void getLength();
	
	char* 	myData;
	float* floatData;
	
	// get/set for the Path property
	
	~maxiSample()
	{
		delete myData, floatData;
		myChunkSize = NULL;
		mySubChunk1Size = NULL;
		myFormat = NULL;
		myChannels = NULL;
		mySampleRate = NULL;
		myByteRate = NULL;
		myBlockAlign = NULL;
		myBitsPerSample = NULL;
		myDataSize = NULL;
	}
	
	// read a wav file into this class
	bool read(string myPath)
	{
		bool result;
		ifstream inFile( myPath.c_str(), ios::in | ios::binary);
		result = inFile;
		
		if (inFile) {
			//printf("Reading wav file...\n"); // for debugging only
			
			inFile.seekg(4, ios::beg);
			inFile.read( (char*) &myChunkSize, 4 ); // read the ChunkSize
			
			inFile.seekg(16, ios::beg);
			inFile.read( (char*) &mySubChunk1Size, 4 ); // read the SubChunk1Size
			
			//inFile.seekg(20, ios::beg);
			inFile.read( (char*) &myFormat, sizeof(short) ); // read the file format.  This should be 1 for PCM
			
			//inFile.seekg(22, ios::beg);
			inFile.read( (char*) &myChannels, sizeof(short) ); // read the # of channels (1 or 2)
			
			//inFile.seekg(24, ios::beg);
			inFile.read( (char*) &mySampleRate, sizeof(int) ); // read the samplerate
			
			//inFile.seekg(28, ios::beg);
			inFile.read( (char*) &myByteRate, sizeof(int) ); // read the byterate
			
			//inFile.seekg(32, ios::beg);
			inFile.read( (char*) &myBlockAlign, sizeof(short) ); // read the blockalign
			
			//inFile.seekg(34, ios::beg);
			inFile.read( (char*) &myBitsPerSample, sizeof(short) ); // read the bitspersample
			
			//ignore any extra chunks
			char chunkID[4]="";
			int filePos = 36;
			bool found = false;
			while(!found && !inFile.eof()) {
				inFile.seekg(filePos, ios::beg);
				inFile.read((char*) &chunkID, sizeof(char) * 4);
				inFile.seekg(filePos + 4, ios::beg);
				inFile.read( (char*) &myDataSize, sizeof(int) ); // read the size of the data
				filePos += 8;
				if (strcmp(chunkID,"data") == 0) {
					found = true;
				}else{
					filePos += myDataSize;
				}
			}
			
			
			
			// read the data chunk
			myData = (char*) malloc(myDataSize * sizeof(char));
			inFile.seekg(filePos, ios::beg);
			inFile.read(myData, myDataSize);
			length=myDataSize*(0.5/myChannels);
						
			inFile.close(); // close the input file
			
			floatData = (float*) malloc(length * myChannels * sizeof(float));
			vDSP_vflt16((short*)myData, 1, floatData, 1, length * myChannels);
			float divFactor=32767.0;
			vDSP_vsdiv(floatData, 1, &divFactor, floatData, 1, length * myChannels); 
			
		}
		
		
		return result; // this should probably be something more descriptive
	}
	
	
	
};





class bronzeFormatApp : public ofxiPhoneApp {
	
public:
	~bronzeFormatApp();
	void setup();
	void update();
	void draw();
	void exit();
	
	void touchDown(ofTouchEventArgs &touch);
	void touchMoved(ofTouchEventArgs &touch);
	void touchUp(ofTouchEventArgs &touch);
	void touchDoubleTap(ofTouchEventArgs &touch);

	void lostFocus();
	void gotFocus();
	void gotMemoryWarning();
	void deviceOrientationChanged(int newOrientation);
	
	void audioRequested( float * output, int bufferSize, int nChannels );

	vector<float*> buffers;
	float bufferCount;
	unsigned int buflength;
	int soundStreamBufferSize;
	
	audioEngine *audioEng;
	sampleInstance *sInst;
	
	maxiSample s1,s2,s3, stereoTest;

};











